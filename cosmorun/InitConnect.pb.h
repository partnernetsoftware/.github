/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_INITCONNECT_INITCONNECT_PB_H_INCLUDED
#define PB_INITCONNECT_INITCONNECT_PB_H_INCLUDED
#include <pb.h>
#include "Common.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _InitConnect_C2S {
    int32_t clientVer; /* 客户端版本号，clientVer = "."以前的数 * 100 + "."以后的，举例：1.1版本的clientVer为1 * 100 + 1 = 101，2.21版本为2 * 100 + 21 = 221 */
    pb_callback_t clientID; /* 客户端唯一标识，无生具体生成规则，客户端自己保证唯一性即可 */
    bool has_recvNotify;
    bool recvNotify; /* 此连接是否接收市场状态、交易需要重新解锁等等事件通知，true代表接收，FutuOpenD就会向此连接推送这些通知，反之false代表不接收不推送 */
    /* 如果通信要加密，首先得在FutuOpenD和客户端都配置RSA密钥，不配置始终不加密
如果配置了RSA密钥且指定的加密算法不为PacketEncAlgo_None则加密(即便这里不设置，配置了RSA密钥，也会采用默认加密方式)，默认采用FTAES_ECB算法 */
    bool has_packetEncAlgo;
    int32_t packetEncAlgo; /* 指定包加密算法，参见Common.PacketEncAlgo的枚举定义 */
    bool has_pushProtoFmt;
    int32_t pushProtoFmt; /* 指定这条连接上的推送协议格式，若不指定则使用push_proto_type配置项 */
    pb_callback_t programmingLanguage; /* 接口编程语言，用于统计语言偏好 */
} InitConnect_C2S;

typedef struct _InitConnect_S2C {
    int32_t serverVer; /* FutuOpenD的版本号 */
    uint64_t loginUserID; /* FutuOpenD登陆的牛牛用户ID */
    uint64_t connID; /* 此连接的连接ID，连接的唯一标识 */
    pb_callback_t connAESKey; /* 此连接后续AES加密通信的Key，固定为16字节长字符串 */
    int32_t keepAliveInterval; /* 心跳保活间隔 */
    pb_callback_t aesCBCiv; /* AES加密通信CBC加密模式的iv，固定为16字节长字符串 */
    bool has_userAttribution;
    int32_t userAttribution; /* 用户类型，牛牛用户或MooMoo用户 */
} InitConnect_S2C;

typedef struct _InitConnect_Request {
    InitConnect_C2S c2s;
} InitConnect_Request;

typedef struct _InitConnect_Response {
    int32_t retType; /* 返回结果，参见Common.RetType的枚举定义 */
    pb_callback_t retMsg; /* 返回结果描述 */
    bool has_errCode;
    int32_t errCode; /* 错误码，客户端一般通过retType和retMsg来判断结果和详情，errCode只做日志记录，仅在个别协议失败时对账用 */
    bool has_s2c;
    InitConnect_S2C s2c;
} InitConnect_Response;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define InitConnect_C2S_init_default             {0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define InitConnect_S2C_init_default             {0, 0, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, false, 0}
#define InitConnect_Request_init_default         {InitConnect_C2S_init_default}
#define InitConnect_Response_init_default        {-400, {{NULL}, NULL}, false, 0, false, InitConnect_S2C_init_default}
#define InitConnect_C2S_init_zero                {0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define InitConnect_S2C_init_zero                {0, 0, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, false, 0}
#define InitConnect_Request_init_zero            {InitConnect_C2S_init_zero}
#define InitConnect_Response_init_zero           {0, {{NULL}, NULL}, false, 0, false, InitConnect_S2C_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define InitConnect_C2S_clientVer_tag            1
#define InitConnect_C2S_clientID_tag             2
#define InitConnect_C2S_recvNotify_tag           3
#define InitConnect_C2S_packetEncAlgo_tag        4
#define InitConnect_C2S_pushProtoFmt_tag         5
#define InitConnect_C2S_programmingLanguage_tag  6
#define InitConnect_S2C_serverVer_tag            1
#define InitConnect_S2C_loginUserID_tag          2
#define InitConnect_S2C_connID_tag               3
#define InitConnect_S2C_connAESKey_tag           4
#define InitConnect_S2C_keepAliveInterval_tag    5
#define InitConnect_S2C_aesCBCiv_tag             6
#define InitConnect_S2C_userAttribution_tag      7
#define InitConnect_Request_c2s_tag              1
#define InitConnect_Response_retType_tag         1
#define InitConnect_Response_retMsg_tag          2
#define InitConnect_Response_errCode_tag         3
#define InitConnect_Response_s2c_tag             4

/* Struct field encoding specification for nanopb */
#define InitConnect_C2S_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    clientVer,         1) \
X(a, CALLBACK, REQUIRED, STRING,   clientID,          2) \
X(a, STATIC,   OPTIONAL, BOOL,     recvNotify,        3) \
X(a, STATIC,   OPTIONAL, INT32,    packetEncAlgo,     4) \
X(a, STATIC,   OPTIONAL, INT32,    pushProtoFmt,      5) \
X(a, CALLBACK, OPTIONAL, STRING,   programmingLanguage,   6)
#define InitConnect_C2S_CALLBACK pb_default_field_callback
#define InitConnect_C2S_DEFAULT NULL

#define InitConnect_S2C_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    serverVer,         1) \
X(a, STATIC,   REQUIRED, UINT64,   loginUserID,       2) \
X(a, STATIC,   REQUIRED, UINT64,   connID,            3) \
X(a, CALLBACK, REQUIRED, STRING,   connAESKey,        4) \
X(a, STATIC,   REQUIRED, INT32,    keepAliveInterval,   5) \
X(a, CALLBACK, OPTIONAL, STRING,   aesCBCiv,          6) \
X(a, STATIC,   OPTIONAL, INT32,    userAttribution,   7)
#define InitConnect_S2C_CALLBACK pb_default_field_callback
#define InitConnect_S2C_DEFAULT NULL

#define InitConnect_Request_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  c2s,               1)
#define InitConnect_Request_CALLBACK NULL
#define InitConnect_Request_DEFAULT NULL
#define InitConnect_Request_c2s_MSGTYPE InitConnect_C2S

#define InitConnect_Response_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    retType,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   retMsg,            2) \
X(a, STATIC,   OPTIONAL, INT32,    errCode,           3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  s2c,               4)
#define InitConnect_Response_CALLBACK pb_default_field_callback
#define InitConnect_Response_DEFAULT (const pb_byte_t*)"\x08\xf0\xfc\xff\xff\xff\xff\xff\xff\xff\x01\x00"
#define InitConnect_Response_s2c_MSGTYPE InitConnect_S2C

extern const pb_msgdesc_t InitConnect_C2S_msg;
extern const pb_msgdesc_t InitConnect_S2C_msg;
extern const pb_msgdesc_t InitConnect_Request_msg;
extern const pb_msgdesc_t InitConnect_Response_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define InitConnect_C2S_fields &InitConnect_C2S_msg
#define InitConnect_S2C_fields &InitConnect_S2C_msg
#define InitConnect_Request_fields &InitConnect_Request_msg
#define InitConnect_Response_fields &InitConnect_Response_msg

/* Maximum encoded size of messages (where known) */
/* InitConnect_C2S_size depends on runtime parameters */
/* InitConnect_S2C_size depends on runtime parameters */
/* InitConnect_Request_size depends on runtime parameters */
/* InitConnect_Response_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
