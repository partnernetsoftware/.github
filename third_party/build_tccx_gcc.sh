#!/bin/sh

# TCC GCC Compilation Script
# Compiles TCC using system GCC
# Output: external/tcc_{current_arch}_{current_bits}.gcc

set -e  # Exit on any error

# Get script directory in a POSIX-compatible way
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TCC_SRC_DIR="$SCRIPT_DIR/tcc/src"
OUTPUT_DIR="$SCRIPT_DIR"
BUILD_DIR="$SCRIPT_DIR/tcc/build_gcc"

# Detect current system architecture
ARCH="$(uname -m)"
case "$ARCH" in
    x86_64) ARCH="x86_64" ;;
    i386|i686) ARCH="x86_32" ;;
    aarch64|arm64) ARCH="arm_64" ;;
    armv7l) ARCH="arm_32" ;;
    *) echo "Warning: Unknown architecture $ARCH, using as-is" ;;
esac

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

printf "${BLUE}=== TCC GCC Compilation ===${NC}\n\n"
echo "Strategy: Build TCC using system GCC"
echo "Target: external/tcc_${ARCH}.gcc"
echo ""

# Clean and create directories
echo "Initializing build environment..."
rm -rf "$BUILD_DIR"
mkdir -p "$BUILD_DIR" "$OUTPUT_DIR"

# Build TCC using system GCC
build_tcc_with_gcc() {
    printf "${BLUE}Building TCC with system GCC...${NC}\n\n"

    # Verify TCC source exists
    if [ ! -d "$TCC_SRC_DIR" ] || [ ! -f "$TCC_SRC_DIR/tcc.c" ]; then
        printf "${RED}ERROR${NC}: TCC source not found at $TCC_SRC_DIR\n\n"
        exit 1
    fi

    cd "$TCC_SRC_DIR"

    # Run configure if config.h doesn't exist
    if [ ! -f "config.h" ]; then
        echo "  Running configure to generate config.h..."
        if ! ./configure; then
            printf "  ${RED}FAILED${NC} - Configure failed\n"
            return 1
        fi
    fi

    # Check if we need to generate tccdefs_.h
    if [ ! -f "tccdefs_.h" ]; then
        echo "  Generating tccdefs_.h..."
        if [ ! -f "c2str" ]; then
            # Create c2str utility if it doesn't exist
            cat > c2str.c << 'EOF'
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    FILE *in, *out;
    int c;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s input.h output_.h\n", argv[0]);
        return 1;
    }

    in = fopen(argv[1], "r");
    if (!in) {
        perror(argv[1]);
        return 1;
    }

    out = fopen(argv[2], "w");
    if (!out) {
        perror(argv[2]);
        fclose(in);
        return 1;
    }

    fprintf(out, "/* This file is automatically generated from %s */\n", argv[1]);
    fprintf(out, "\"");

    while ((c = fgetc(in)) != EOF) {
        if (c == '"') {
            fprintf(out, "\\\"");
        } else if (c == '\\') {
            fprintf(out, "\\\\");
        } else if (c == '\n') {
            fprintf(out, "\\n\"\n\"");
        } else if (c == '\r') {
            /* skip carriage return */
        } else {
            fputc(c, out);
        }
    }

    fprintf(out, "\"\n");

    fclose(in);
    fclose(out);

    return 0;
}
EOF
            gcc -o c2str c2str.c
        fi
        ./c2str include/tccdefs.h tccdefs_.h
    fi

    # Build TCC using ONE_SOURCE method with system GCC
    echo "  Compiling TCC with system GCC..."
    local output_file="tcc_${ARCH}.gcc"

    # Configure TCC to use relative paths with {B} placeholder
    # {B} will be replaced at runtime with the directory containing TCC binary
    # Don't set CONFIG_TCCDIR to enable runtime path detection
    if gcc -o "$output_file" tcc.c -DONE_SOURCE=1 -DTCC_GITHASH='"2025-07-24"' \
        -DCONFIG_TCC_CRTPREFIX='"{B}/tcc/lib"' \
        -DCONFIG_TCC_ELFINTERP="\"/lib64/ld-linux-x86-64.so.2\"" \
        -DCONFIG_TCC_LIBPATHS='"{B}/tcc/lib:/usr/lib:/lib"' \
        -DCONFIG_TCC_SYSINCLUDEPATHS='"{B}/tcc/src/include:/usr/include:/usr/include/x86_64-linux-gnu"' \
        -I. -lm -ldl; then
        printf "  ${GREEN}SUCCESS${NC} - TCC built successfully with GCC\n"

        # Test the TCC
        if "./$output_file" -v >/dev/null 2>&1; then
            printf "  ${GREEN}VERIFIED${NC} - TCC is working\n"

            # Build libtcc1.a runtime library
            echo "  Building libtcc1.a runtime library..."
            if make libtcc1.a >/dev/null 2>&1; then
                printf "  ${GREEN}SUCCESS${NC} - libtcc1.a built successfully\n"
            else
                printf "  ${YELLOW}WARNING${NC} - libtcc1.a build failed, but continuing\n"
            fi

            # Copy to output directory
            cp "$output_file" "$OUTPUT_DIR/"
            printf "  ${GREEN}OUTPUT${NC} - Copied to $OUTPUT_DIR/$output_file\n"
            return 0
        else
            printf "  ${RED}FAILED${NC} - TCC built but not working\n"
            return 1
        fi
    else
        printf "  ${RED}FAILED${NC} - TCC compilation with GCC failed\n"
        return 1
    fi
}

# Main compilation process
main() {
    echo "TCC source directory: $TCC_SRC_DIR"
    echo "Output directory: $OUTPUT_DIR"
    echo "Build directory: $BUILD_DIR"
    echo "Target architecture: $ARCH"
    echo "Output file: tcc_${ARCH}.gcc"
    echo ""

    # Build TCC using system GCC
    if ! build_tcc_with_gcc; then
        printf "${RED}FATAL ERROR${NC}: Failed to build TCC with GCC\n"
        exit 1
    fi
    echo ""

    # Return to original directory
    cd "$SCRIPT_DIR"

    # Final summary
    printf "${BLUE}=== TCC GCC Compilation Results ===${NC}\n\n"

    local output_file="$OUTPUT_DIR/tcc_${ARCH}.gcc"
    if [ -f "$output_file" ]; then
        printf "${GREEN}Successfully compiled TCC:${NC}\n\n"
        echo "  Output: $output_file"

        # Show file info
        echo "  File info:"
        file "$output_file" 2>/dev/null | sed 's/^/    /' || echo "    (file command not available)"
        ls -lh "$output_file" | awk '{print "    Size: " $5}'
        echo ""

        printf "${GREEN}TCC compilation completed successfully!${NC}\n\n"
        echo "You can now use: $output_file"
    else
        printf "${RED}ERROR: Output file not found!${NC}\n\n"
        exit 1
    fi
}

# Execute main function
main "$@"