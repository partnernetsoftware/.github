#ifndef CDP_JS_RESOURCES_H
#define CDP_JS_RESOURCES_H

#include <stdlib.h>
#include <string.h>

static const char tmp_cdp_enhanced_js[] = 
"(function(){'use strict';\n"
"  \n"
"  // ======================================================================================\n"
"  // CDP Enhanced - C-side Logic Migration (减少C端代码复杂度)\n"
"  // ======================================================================================\n"
"  \n"
"  // 防重复注入检查\n"
"  if (window.CDP_Enhanced && window.CDP_Enhanced.version === '2.1') {\n"
"    console.log('CDP Enhanced v2.1 already loaded, skipping injection');\n"
"    return; // 已经注入过了，跳过\n"
"  }\n"
"  \n"
"  const q = s => document.querySelector(s);\n"
"  const qa = s => document.querySelectorAll(s);\n"
"  \n"
"  // 1. 统一结果格式 - 替代C端value解析\n"
"  const result = {\n"
"    ok: (data) => JSON.stringify({ok: true, data: data, err: null}),\n"
"    err: (error, data = null) => JSON.stringify({ok: false, data: data, err: error})\n"
"  };\n"
"\n"
"  const toDisplay = (v) => {\n"
"    try {\n"
"      if (v === undefined) return 'undefined';\n"
"      if (v === null) return 'null';\n"
"      if (typeof v === 'string') return v;\n"
"      if (typeof v === 'object') return JSON.stringify(v, null, 2);\n"
"      return String(v);\n"
"    } catch (e) {\n"
"      try { return String(v); } catch { return '[unprintable]'; }\n"
"    }\n"
"  };\n"
"\n"
"  const unwrapDisplay = (s) => {\n"
"    if (typeof s !== 'string') return toDisplay(s);\n"
"    try {\n"
"      const o = JSON.parse(s);\n"
"      if (o && typeof o === 'object' && 'ok' in o && ('data' in o || 'err' in o)) {\n"
"        return o.ok ? toDisplay(o.data) : `Error: ${o.err}`;\n"
"      }\n"
"    } catch {}\n"
"    return s;\n"
"  };\n"
"  \n"
"  // 2. 增强DOM API - 替代C端模板\n"
"  const fastDOM = {\n"
"    click: s => { \n"
"      const el = q(s); \n"
"      if (!el) return result.err('Element not found', s);\n"
"      try { el.click(); return result.ok(true); } catch(e) { return result.err(e.message, s); }\n"
"    },\n"
"    set: (s,v) => { \n"
"      const el = q(s); \n"
"      if (!el) return result.err('Element not found', s);\n"
"      try { \n"
"        el.value = v; \n"
"        el.dispatchEvent(new Event('input',{bubbles:true})); \n"
"        return result.ok(true);\n"
"      } catch(e) { return result.err(e.message, {selector: s, value: v}); }\n"
"    },\n"
"    text: s => { \n"
"      const el = q(s); \n"
"      return el ? result.ok(el.innerText) : result.err('Element not found', s);\n"
"    },\n"
"    html: s => { \n"
"      const el = q(s); \n"
"      return el ? result.ok(el.innerHTML) : result.err('Element not found', s);\n"
"    },\n"
"    attr: (s,n) => { \n"
"      const el = q(s); \n"
"      if (!el) return result.err('Element not found', s);\n"
"      return result.ok(el.getAttribute(n));\n"
"    },\n"
"    attrs: s => { \n"
"      const el = q(s); \n"
"      if (!el) return result.err('Element not found', s);\n"
"      const o = {}; \n"
"      for(const a of el.attributes) o[a.name] = a.value; \n"
"      return result.ok(o);\n"
"    },\n"
"    \n"
"    // 批量操作 - 替代C端循环\n"
"    qsaTexts: s => {\n"
"      try {\n"
"        const texts = Array.from(qa(s)).map(e => e.innerText);\n"
"        return result.ok(texts);\n"
"      } catch(e) { return result.err(e.message, s); }\n"
"    },\n"
"    qsaAttrs: (s, attrName) => {\n"
"      try {\n"
"        const attrs = Array.from(qa(s)).map(e => e.getAttribute(attrName));\n"
"        return result.ok(attrs);\n"
"      } catch(e) { return result.err(e.message, {selector: s, attr: attrName}); }\n"
"    },\n"
"    \n"
"    // 高级DOM操作\n"
"    exists: s => result.ok(q(s) !== null),\n"
"    count: s => {\n"
"      try { return result.ok(qa(s).length); } catch(e) { return result.err(e.message, s); }\n"
"    },\n"
"    visible: s => {\n"
"      const el = q(s);\n"
"      if (!el) return result.err('Element not found', s);\n"
"      const style = getComputedStyle(el);\n"
"      return result.ok(style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0');\n"
"    }\n"
"  };\n"
"  \n"
"  // 3. 表单工作流API - 替代C端表单处理\n"
"  const form = {\n"
"    fill: (formSelector, fieldMap) => {\n"
"      try {\n"
"        const formEl = q(formSelector);\n"
"        if (!formEl) return result.err('Form not found', formSelector);\n"
"        const errors = [];\n"
"        for (const [fieldSelector, value] of Object.entries(fieldMap)) {\n"
"          const field = formEl.querySelector(fieldSelector);\n"
"          if (!field) {\n"
"            errors.push(`Field not found: ${fieldSelector}`);\n"
"            continue;\n"
"          }\n"
"          field.value = value;\n"
"          field.dispatchEvent(new Event('input', {bubbles: true}));\n"
"        }\n"
"        return errors.length > 0 ? \n"
"          result.err('Some fields not found', {filled: Object.keys(fieldMap).length - errors.length, errors}) :\n"
"          result.ok({filled: Object.keys(fieldMap).length});\n"
"      } catch(e) { return result.err(e.message, {formSelector, fieldMap}); }\n"
"    },\n"
"    submit: (formSelector) => {\n"
"      try {\n"
"        const formEl = q(formSelector);\n"
"        if (!formEl) return result.err('Form not found', formSelector);\n"
"        formEl.submit();\n"
"        return result.ok(true);\n"
"      } catch(e) { return result.err(e.message, formSelector); }\n"
"    }\n"
"  };\n"
"  \n"
"  // 4. 增强shortcuts - 替代C端命令解析\n"
"  const shortcuts = new Map([\n"
"    // DOM操作\n"
"    ['.click', a => fastDOM.click(a)],\n"
"    ['.set', a => { const sp=a.indexOf(' '); return sp>0 ? fastDOM.set(a.slice(0,sp), a.slice(sp+1)) : result.err('Invalid set syntax', a); }],\n"
"    ['.text', a => fastDOM.text(a)],\n"
"    ['.html', a => fastDOM.html(a)],\n"
"    ['.exists', a => fastDOM.exists(a)],\n"
"    ['.count', a => fastDOM.count(a)],\n"
"    ['.visible', a => fastDOM.visible(a)],\n"
"    \n"
"    // 批量操作\n"
"    ['.texts', a => fastDOM.qsaTexts(a)],\n"
"    ['.attrs', a => {\n"
"      const sp = a.indexOf(' ');\n"
"      return sp > 0 ? fastDOM.qsaAttrs(a.slice(0,sp), a.slice(sp+1)) : result.err('Invalid attrs syntax', a);\n"
"    }],\n"
"    \n"
"    // 高级DOM操作 - 替代C端复杂逻辑\n"
"    ['.attr', a => {\n"
"      const sp = a.indexOf(' ');\n"
"      if (sp <= 0) return result.err('Usage: .attr <selector> <attributeName>', a);\n"
"      const selector = a.slice(0, sp);\n"
"      const attrName = a.slice(sp + 1);\n"
"      return fastDOM.attr(selector, attrName);\n"
"    }],\n"
"    ['.prop', a => {\n"
"      const parts = a.split(' ');\n"
"      if (parts.length < 3) return result.err('Usage: .prop <selector> <property> <value>', a);\n"
"      const selector = parts[0];\n"
"      const propName = parts[1];\n"
"      const propValue = parts.slice(2).join(' ');\n"
"      const el = q(selector);\n"
"      if (!el) return result.err('Element not found', selector);\n"
"      try { \n"
"        el[propName] = propValue; \n"
"        return result.ok(true); \n"
"      } catch(e) { \n"
"        return result.err(e.message, {selector, propName, propValue}); \n"
"      }\n"
"    }],\n"
"    ['.call', a => {\n"
"      const sp = a.indexOf(' ');\n"
"      if (sp <= 0) return result.err('Usage: .call <selector> <function>', a);\n"
"      const selector = a.slice(0, sp);\n"
"      const func = a.slice(sp + 1);\n"
"      const el = q(selector);\n"
"      if (!el) return result.err('Element not found', selector);\n"
"      try { \n"
"        return result.ok(eval(`(function() { return (${func}).call(this); }).call(el)`)); \n"
"      } catch(e) { \n"
"        return result.err(e.message, {selector, func}); \n"
"      }\n"
"    }],\n"
"    \n"
"    // 页面信息\n"
"    ['.url', () => result.ok(location.href)],\n"
"    ['.title', () => result.ok(document.title)],\n"
"    ['.cookies', () => result.ok(document.cookie)],\n"
"    ['.time', () => result.ok(new Date().toLocaleString())],\n"
"    ['.ua', () => result.ok(navigator.userAgent)],\n"
"    ['.screen', () => result.ok({width: screen.width, height: screen.height})],\n"
"    ['.viewport', () => result.ok({width: innerWidth, height: innerHeight})],\n"
"    ['.scroll', () => result.ok({x: scrollX, y: scrollY})],\n"
"    \n"
"    // 操作快捷键\n"
"    ['.clear', () => { console.clear(); return result.ok('Console cleared'); }],\n"
"    ['.reload', () => { location.reload(); return result.ok('Page reloading'); }],\n"
"    ['.back', () => { history.back(); return result.ok('Going back'); }],\n"
"    ['.forward', () => { history.forward(); return result.ok('Going forward'); }]\n"
"  ]);\n"
"  \n"
"  // 5. 命令调度器 - 替代C端命令路由\n"
"  // const dispatcher = {\n"
"  //   execute: (command) => {\n"
"  //     try {\n"
"  //       // 处理shortcuts\n"
"  //       for (const [prefix, handler] of shortcuts) {\n"
"  //         if (command.startsWith(prefix)) {\n"
"  //           const args = command.substring(prefix.length).trim();\n"
"  //           return handler(args);\n"
"  //         }\n"
"  //       }\n"
"  //       // 处理直接JavaScript\n"
"  //       if (command.startsWith('js:') || command.startsWith('eval:')) {\n"
"  //         const code = command.substring(command.indexOf(':') + 1).trim();\n"
"  //         return result.ok(eval(code));\n"
"  //       }\n"
"  //       // 默认作为JavaScript表达式\n"
"  //       return result.ok(eval(command));\n"
"  //     } catch(e) { return result.err(e.message, command); }\n"
"  //   }\n"
"  // };\n"
"  \n"
"  const jsonUtils = { \n"
"    safe: s => { try { return JSON.parse(s); } catch { return null; } }, \n"
"    pretty: o => JSON.stringify(o, null, 2),\n"
"    escape: s => JSON.stringify(s)\n"
"  };\n"
"  \n"
"  // 6. 性能统计系统 - 替代C端性能跟踪\n"
"  const perfStats = {\n"
"    commands: [],\n"
"    sessionStart: performance.now(),\n"
"    \n"
"    track: (command, execTime) => {\n"
"      perfStats.commands.push({\n"
"        command: command.substring(0, 50), // 截断长命令\n"
"        time: execTime,\n"
"        timestamp: performance.now()\n"
"      });\n"
"      \n"
"      // 只保留最近1000条记录\n"
"      if (perfStats.commands.length > 1000) {\n"
"        perfStats.commands = perfStats.commands.slice(-1000);\n"
"      }\n"
"    },\n"
"    \n"
"    getReport: () => {\n"
"      if (perfStats.commands.length === 0) {\n"
"        return result.ok('No commands executed yet');\n"
"      }\n"
"      \n"
"      const times = perfStats.commands.map(c => c.time);\n"
"      const totalTime = times.reduce((a, b) => a + b, 0);\n"
"      const avgTime = totalTime / times.length;\n"
"      const minTime = Math.min(...times);\n"
"      const maxTime = Math.max(...times);\n"
"      const sessionTime = (performance.now() - perfStats.sessionStart) / 1000;\n"
"      \n"
"      const report = {\n"
"        sessionDuration: `${sessionTime.toFixed(1)}s`,\n"
"        commandsExecuted: perfStats.commands.length,\n"
"        averageTime: `${avgTime.toFixed(2)}ms`,\n"
"        minTime: `${minTime.toFixed(2)}ms`,\n"
"        maxTime: `${maxTime.toFixed(2)}ms`,\n"
"        totalTime: `${totalTime.toFixed(2)}ms`,\n"
"        commandsPerSecond: sessionTime > 0 ? (perfStats.commands.length / sessionTime).toFixed(2) : '0'\n"
"      };\n"
"      \n"
"      return result.ok(report);\n"
"    },\n"
"    \n"
"    reset: () => {\n"
"      perfStats.commands = [];\n"
"      perfStats.sessionStart = performance.now();\n"
"      return result.ok('Performance stats reset');\n"
"    }\n"
"  };\n"
"\n"
"  // 7. 帮助系统 - 替代C端帮助文本\n"
"  const helpSystem = {\n"
"    formatHelp: () => {\n"
"      const categories = {\n"
"        'DOM Operations': [\n"
"          {cmd: '.click <selector>', desc: 'Click element'},\n"
"          {cmd: '.set <selector> <value>', desc: 'Set input value'},\n"
"          {cmd: '.text <selector>', desc: 'Get element text'},\n"
"          {cmd: '.html <selector>', desc: 'Get element HTML'},\n"
"          {cmd: '.exists <selector>', desc: 'Check if element exists'},\n"
"          {cmd: '.count <selector>', desc: 'Count elements'},\n"
"          {cmd: '.visible <selector>', desc: 'Check if element visible'}\n"
"        ],\n"
"        'Advanced DOM': [\n"
"          {cmd: '.attr <selector> <attr>', desc: 'Get element attribute'},\n"
"          {cmd: '.prop <selector> <prop> <value>', desc: 'Set element property'},\n"
"          {cmd: '.call <selector> <function>', desc: 'Call function on element'}\n"
"        ],\n"
"        'Batch Operations': [\n"
"          {cmd: '.texts <selector>', desc: 'Get all texts from matching elements'},\n"
"          {cmd: '.attrs <selector> <attr>', desc: 'Get attribute from all elements'}\n"
"        ],\n"
"        'Page Info': [\n"
"          {cmd: '.url', desc: 'Current URL'},\n"
"          {cmd: '.title', desc: 'Page title'},\n"
"          {cmd: '.time', desc: 'Current time'},\n"
"          {cmd: '.ua', desc: 'User agent'},\n"
"          {cmd: '.screen', desc: 'Screen dimensions'},\n"
"          {cmd: '.viewport', desc: 'Viewport dimensions'}\n"
"        ],\n"
"        'Actions': [\n"
"          {cmd: '.clear', desc: 'Clear console'},\n"
"          {cmd: '.reload', desc: 'Reload page'},\n"
"          {cmd: '.back', desc: 'Go back'},\n"
"          {cmd: '.forward', desc: 'Go forward'}\n"
"        ],\n"
"        'System': [\n"
"          {cmd: '.stats', desc: 'Show performance statistics'},\n"
"          {cmd: '.help', desc: 'Show this help'}\n"
"        ]\n"
"      };\n"
"      \n"
"      let helpText = '\\n=== CDP Enhanced Commands ===\\n';\n"
"      for (const [category, commands] of Object.entries(categories)) {\n"
"        helpText += `\\n${category}:\\n`;\n"
"        commands.forEach(({cmd, desc}) => {\n"
"          helpText += `  ${cmd.padEnd(30)} - ${desc}\\n`;\n"
"        });\n"
"      }\n"
"      helpText += '\\nNote: You can also use JavaScript expressions directly\\n';\n"
"      \n"
"      return helpText;\n"
"    }\n"
"  };\n"
"\n"
"  // 8. 增强的命令调度器 - 包含性能跟踪\n"
"  const enhancedDispatcher = {\n"
"    execute: (command) => {\n"
"      const startTime = performance.now();\n"
"      let cmdResult;\n"
"      \n"
"      try {\n"
"        // Handle help and stats first\n"
"        if (command === '.help') {\n"
"          cmdResult = helpSystem.formatHelp();\n"
"        } else if (command === '.stats') {\n"
"          cmdResult = perfStats.getReport();\n"
"        } else if (command === '.perf_reset') {\n"
"          cmdResult = perfStats.reset();\n"
"        } else {\n"
"          // 处理shortcuts\n"
"          for (const [prefix, handler] of shortcuts) {\n"
"            if (command.startsWith(prefix)) {\n"
"              const args = command.substring(prefix.length).trim();\n"
"              cmdResult = handler(args);\n"
"              break;\n"
"            }\n"
"          }\n"
"          \n"
"          // 如果没有匹配的shortcut，处理JavaScript\n"
"          if (!cmdResult) {\n"
"            if (command.startsWith('js:') || command.startsWith('eval:')) {\n"
"              const code = command.substring(command.indexOf(':') + 1).trim();\n"
"              cmdResult = result.ok(eval(code));\n"
"            } else {\n"
"              // 默认作为JavaScript表达式\n"
"              cmdResult = result.ok(eval(command));\n"
"            }\n"
"          }\n"
"        }\n"
"      } catch(e) { \n"
"        cmdResult = result.err(e.message, command); \n"
"      }\n"
"      \n"
"      const endTime = performance.now();\n"
"      const execTime = endTime - startTime;\n"
"      \n"
"      // Track performance\n"
"      perfStats.track(command, execTime);\n"
"      \n"
"      return unwrapDisplay(cmdResult);\n"
"    }\n"
"  };\n"
"\n"
"  // 全局暴露 - C端单一入口点\n"
"  window.CDP_Enhanced = { \n"
"    fastDOM, form, shortcuts, dispatcher: enhancedDispatcher, jsonUtils, result,\n"
"    perfStats, helpSystem,  // 新增功能\n"
"    exec: enhancedDispatcher.execute,  // C端主入口\n"
"    version: '2.1',\n"
"    features: ['unified-results', 'batch-operations', 'form-workflows', 'performance-tracking', 'help-system'],\n"
"    isReady: () => true\n"
"  };\n"
"  \n"
"})();\n"
;

static const unsigned int tmp_cdp_enhanced_js_len = sizeof(tmp_cdp_enhanced_js) - 1;


// ==================================================================================
// Embedded JavaScript Resources - C Integration Layer
// ==================================================================================
//
// USAGE EXAMPLES:
//   #include "cdp_js_resources.h"
//   
//   // Get the embedded JavaScript code
//   const char* js_code = get_cdp_enhanced_js();
//   
//   // Inject into Chrome page
//   char response[1024];
//   cdp_runtime_eval(js_code, 0, 0, response, sizeof(response), 5000);
//
// WHAT THIS JS PROVIDES:
//   - CDP_Enhanced.fastDOM.click(selector)     → Fast DOM element clicking
//   - CDP_Enhanced.fastDOM.set(selector, val)  → Fast input value setting
//   - CDP_Enhanced.fastDOM.text(selector)      → Fast text content retrieval
//   - CDP_Enhanced.fastDOM.attr(selector, name) → Fast attribute reading
//   - CDP_Enhanced.shortcuts Map for command aliases
//   - CDP_Enhanced.jsonUtils for safe JSON operations
//
// PERFORMANCE BENEFITS:
//   - Eliminates C→Chrome→JS→Chrome→C round trips for common operations
//   - Direct DOM manipulation in the browser context
//   - ~15-25% performance improvement for DOM operations
//   - Reduces complexity in C user features code
//
// INTEGRATION PATTERN:
//   1. Include this header in cdp.c or relevant modules
//   2. Call get_cdp_enhanced_js() to get the JavaScript string
//   3. Use cdp_runtime_eval() to inject on page load or navigation
//   4. Use C layer as fallback when JS enhancement unavailable
//
// ==================================================================================

/**
 * Returns embedded JavaScript code as null-terminated string
 * 
 * Since we now use C string literals instead of byte arrays,
 * this simply returns the static string directly - no conversion needed.
 * 
 * @return const char* JavaScript code ready for injection
 */
static inline const char* get_cdp_enhanced_js(void) {
    return tmp_cdp_enhanced_js;
}

/**
 * Returns the size of embedded JavaScript code in bytes
 * 
 * @return unsigned int Size of the JavaScript code
 */
static inline unsigned int get_cdp_enhanced_js_size(void) {
    return tmp_cdp_enhanced_js_len;
}

/**
 * Checks if JavaScript enhancement is available
 * 
 * @return int 1 if available, 0 if not
 */
static inline int cdp_enhanced_js_available(void) {
    return tmp_cdp_enhanced_js_len > 0;
}

#endif // CDP_JS_RESOURCES_H

